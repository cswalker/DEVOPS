---
- name: "Get Secret Facts"
  oracle.oci.oci_vault_secret_facts:
    compartment_id: "{{ compartments[item.value].compartment_ocid }}"
    name: "{{ item.key }}"
  become: false
  delegate_to: localhost
  register: vault_secret_facts
  retries: 3
  delay: "{{ 60 | random }}"
  until: vault_secret_facts is not failed
  environment:
    OCI_ANSIBLE_AUTH_TYPE: "instance_principal"
  with_dict:
    "{{ secrets }}"
  loop_control:
    label: "{{ item.key }}"

- set_fact:
    secrets: "{{ secrets | combine({item.item.key: item.secrets[0].id}) }}"
  with_items: "{{ vault_secret_facts.results }}"
  loop_control:
    label: "{{ item.secrets[0].id }}"

- name: "Get the Secret by OCID"
  oracle.oci.oci_secrets_secret_bundle_facts:
    secret_id: "{{ item.value }}"
  register: vault_secret_bundles
  become: false
  delegate_to: localhost
  environment:
    OCI_ANSIBLE_AUTH_TYPE: "instance_principal"
  with_dict:
    "{{ secrets }}"
  no_log: true
  loop_control:
    label: "{{ item.value }}"

- set_fact:
    secrets: "{{ secrets | combine({item.item.key: item.secret_bundle.secret_bundle_content.content | b64decode}) }}"
  with_items: "{{ vault_secret_bundles.results }}"
  no_log: true
  loop_control:
    label: "{{ item.item.key }}"
